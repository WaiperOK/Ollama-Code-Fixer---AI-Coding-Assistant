@echo off
title Ollama Code Fixer - Extension Packager
color 0A
echo.
echo üì¶ ===============================================
echo     OLLAMA CODE FIXER - EXTENSION PACKAGER
echo    ===============================================
echo.

REM –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ vsce
echo üîç Checking if vsce is installed...
call vsce --version >nul 2>&1
if %ERRORLEVEL% neq 0 (
    echo ‚ùå vsce is not installed globally!
    echo.
    echo üì• Installing vsce globally...
    call npm install -g @vscode/vsce
    if %ERRORLEVEL% neq 0 (
        echo ‚ùå Failed to install vsce!
        pause
        exit /b 1
    )
    echo ‚úÖ vsce installed successfully!
)
echo ‚úÖ vsce is available
echo.

REM –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö .vsix —Ñ–∞–π–ª–æ–≤
echo üßπ Cleaning old .vsix files...
if exist "*.vsix" (
    del "*.vsix"
    echo ‚úÖ Old .vsix files removed
) else (
    echo ‚ÑπÔ∏è No old .vsix files found
)
echo.

REM –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo üì¶ Installing dependencies...
call npm install
if %ERRORLEVEL% neq 0 (
    echo ‚ùå npm install failed!
    pause
    exit /b 1
)
echo ‚úÖ Dependencies installed
echo.

REM –ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript
echo üîß Compiling TypeScript...
call npm run compile
if %ERRORLEVEL% neq 0 (
    echo ‚ùå Compilation failed!
    echo.
    echo üí° Try fixing TypeScript errors first:
    echo    - Check src/ files for errors
    echo    - Run: npm run lint
    pause
    exit /b 1
)
echo ‚úÖ TypeScript compiled successfully
echo.

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
echo üîç Checking project structure...
if not exist "dist\extension.js" (
    echo ‚ùå dist\extension.js not found!
    echo    Compilation might have failed
    pause
    exit /b 1
)
echo ‚úÖ Extension files found

if not exist "package.json" (
    echo ‚ùå package.json not found!
    pause
    exit /b 1
)
echo ‚úÖ package.json found

if not exist "README.md" (
    echo ‚ö†Ô∏è README.md not found (recommended)
) else (
    echo ‚úÖ README.md found
)

if not exist "images\icon.png" (
    echo ‚ö†Ô∏è Icon not found (might be required)
) else (
    echo ‚úÖ Icon found
)
echo.

REM –°–æ–∑–¥–∞–Ω–∏–µ .vsix –ø–∞–∫–µ—Ç–∞
echo üì¶ Creating .vsix package...
echo.
call vsce package
if %ERRORLEVEL% neq 0 (
    echo ‚ùå Packaging failed!
    echo.
    echo üí° Common issues:
    echo    - Missing 'publisher' in package.json
    echo    - Missing icon file
    echo    - Invalid package.json format
    echo    - Files in .vscodeignore
    echo.
    echo üîß Try running: vsce ls
    echo    to see what would be included
    pause
    exit /b 1
)
echo.

REM –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
echo ‚úÖ ============================================
echo       EXTENSION PACKAGED SUCCESSFULLY!
echo    ============================================
echo.
echo üìÅ Created files:
dir *.vsix /b
echo.

REM –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
for %%f in (*.vsix) do (
    echo üìä File info:
    echo    Name: %%f
    echo    Size: %%~zf bytes ^(%.2f KB^)
    set /a size_kb=%%~zf/1024
    echo           ~!size_kb! KB
)
echo.

echo üéØ What you can do now:
echo    1. Install locally: code --install-extension your-file.vsix
echo    2. Share with others: send the .vsix file
echo    3. Test on another machine
echo    4. Publish to marketplace: vsce publish
echo.

echo üí° Installation commands:
for %%f in (*.vsix) do (
    echo    code --install-extension %%f
)
echo.

echo ‚ú® Happy coding with your Ollama AI assistant!
pause 