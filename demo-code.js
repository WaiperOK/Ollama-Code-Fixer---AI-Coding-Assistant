// ü¶ô Ollama Code Fixer - Demo File
// –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

// ‚ùå –ü–†–ò–ú–ï–† 1: –ö–æ–¥ —Å –æ—à–∏–±–∫–∞–º–∏ (–¥–ª—è Fix Code)
function calculateAverage(numbers) {
    let sum = 0;
    for (let i = 0; i <= numbers.length; i++) {  // –û—à–∏–±–∫–∞: <= –≤–º–µ—Å—Ç–æ <
        sum += numbers[i];
    }
    return sum / numbers.length;
}

// ‚ö° –ü–†–ò–ú–ï–† 2: –ù–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ (–¥–ª—è Optimize Code)
function findDuplicates(arr) {
    let duplicates = [];
    for (let i = 0; i < arr.length; i++) {
        for (let j = i + 1; j < arr.length; j++) {
            if (arr[i] === arr[j]) {
                if (duplicates.indexOf(arr[i]) === -1) {
                    duplicates.push(arr[i]);
                }
            }
        }
    }
    return duplicates;
}

// üìù –ü–†–ò–ú–ï–† 3: –ö–æ–¥ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–ª—è Add Comments)
function fibonacci(n) {
    if (n <= 1) return n;
    let a = 0, b = 1;
    for (let i = 2; i <= n; i++) {
        [a, b] = [b, a + b];
    }
    return b;
}

// üîí –ü–†–ò–ú–ï–† 4: –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–¥ (–¥–ª—è Security Check)
function executeUserCommand(userInput) {
    // –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ! –í–æ–∑–º–æ–∂–Ω–∞ –∏–Ω—ä–µ–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥
    const { exec } = require('child_process');
    return exec(userInput);
}

function validateUser(username, password) {
    // –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ! –û–±—ã—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    return username === 'admin' && password === 'password123';
}

// üîÑ –ü–†–ò–ú–ï–† 5: –ö–æ–¥ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–ª—è Refactor Code)
let userData = {};
function processUser(name, age, email, phone, address) {
    if (name && age && email) {
        if (age >= 18) {
            if (email.includes('@')) {
                userData.name = name;
                userData.age = age;
                userData.email = email;
                userData.phone = phone;
                userData.address = address;
                userData.isValid = true;
                return userData;
            } else {
                return null;
            }
        } else {
            return null;
        }
    } else {
        return null;
    }
}

// üß™ –ü–†–ò–ú–ï–† 6: –§—É–Ω–∫—Ü–∏—è –±–µ–∑ —Ç–µ—Å—Ç–æ–≤ (–¥–ª—è Generate Tests)
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function formatCurrency(amount, currency = 'USD') {
    if (typeof amount !== 'number' || amount < 0) {
        throw new Error('Invalid amount');
    }
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: currency
    }).format(amount);
}

// üåê –ü–†–ò–ú–ï–† 7: –ö–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–¥–ª—è Translate Code)
// –í—ã–¥–µ–ª–∏—Ç–µ —ç—Ç–æ—Ç JavaScript –∫–æ–¥ –∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –≤ Python
function mergeArrays(arr1, arr2) {
    const result = [...arr1];
    for (const item of arr2) {
        if (!result.includes(item)) {
            result.push(item);
        }
    }
    return result.sort();
}

// ‚ùì –ü–†–ò–ú–ï–† 8: –°–ª–æ–∂–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è (–¥–ª—è Explain Code)
const memoize = (fn) => {
    const cache = new Map();
    return (...args) => {
        const key = JSON.stringify(args);
        if (cache.has(key)) {
            return cache.get(key);
        }
        const result = fn.apply(this, args);
        cache.set(key, result);
        return result;
    };
};

// ‚ú® –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø GENERATE CODE:
// –ü–æ—Å—Ç–∞–≤—å—Ç–µ –∫—É—Ä—Å–æ—Ä –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "Generate Code"
// –ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π:
// - "Create a function to validate a credit card number"
// - "Generate a React component for user profile"
// - "Write a function to sort objects by multiple properties"
// - "Create a debounce function with TypeScript types"
// - "Generate SQL query to find top 10 customers by sales"

/* 
üéØ –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –≠–¢–û–¢ –§–ê–ô–õ:

1. üîß FIX CODE:
   - –í—ã–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é calculateAverage
   - –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Üí "üîß Fix Code"

2. ‚ö° OPTIMIZE CODE:
   - –í—ã–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é findDuplicates
   - –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Üí "‚ö° Optimize Code"

3. üí¨ ADD COMMENTS:
   - –í—ã–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é fibonacci
   - –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Üí "üí¨ Add Comments"

4. üîí SECURITY CHECK:
   - –í—ã–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ executeUserCommand –∏–ª–∏ validateUser
   - –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Üí "üîí Security Check"

5. üîÑ REFACTOR CODE:
   - –í—ã–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é processUser
   - –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Üí "üîÑ Refactor Code"

6. üß™ GENERATE TESTS:
   - –í—ã–¥–µ–ª–∏—Ç–µ validateEmail –∏–ª–∏ formatCurrency
   - –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Üí "üß™ Generate Tests"

7. üåê TRANSLATE CODE:
   - –í—ã–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é mergeArrays
   - –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Üí "üåê Translate Code"
   - –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Python)

8. üìù EXPLAIN CODE:
   - –í—ã–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é memoize
   - –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Üí "üìù Explain Code"

9. ‚ú® GENERATE CODE:
   - –ü–æ—Å—Ç–∞–≤—å—Ç–µ –∫—É—Ä—Å–æ—Ä –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ
   - Ctrl+Shift+P ‚Üí "Generate Code"
   - –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å

10. üí¨ AI CHAT:
    - –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å Ollama
    - –ù–∞–∂–º–∏—Ç–µ "üí¨ Open AI Chat"
    - –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–¥–µ
*/ 